<div class="row section-div">
  <div class="col s6 content_div">
    <h4>Validation Helpers</h4>
    <ol>
      <li>
        <h5 class="flow-text-header">acceptance</h5>
        <p class="flow-text">This method validates that a checkbox on the user interface was checked when a form was submitted. This is typically used when the user needs to agree to your application's terms of service</p>
        <pre class="brush: ruby">
          class Person < ActiveRecord::Base
            validates :terms_of_service, acceptance: true
          end
        </pre>
      </li>
      <li>
        <h5 class="flow-text-header">validates_associated</h5>
        <p class="flow-text">use this helper when your model has associations with other models and they also need to be validated. When you try to save your object, valid? will be called upon each one of the associated objects.</p>
        <pre class="brush: ruby">
          class Library < ActiveRecord::Base
            has_many :books
            validates_associated :books
          end
        </pre>
        <blockquote class="flow-text">
          Don't use validates_associated on both ends of your associations. They would call each other in an infinite loop.
        </blockquote>
      </li>
      <li>
        <h5 class="flow-text-header">confirmation</h5>
        <p class="flow-text">Use this helper when you have two text fields that should receive exactly the same content. For example, you may want to confirm an email address or a password.</p>
        <pre class="brush: ruby">
          class Person < ActiveRecord::Base
            validates :email, confirmation: true
          end

          # In ERB view file
          <%%= text_field :person, :email %>
          <%%= text_field :person, :email_confirmation %>
        </pre>
      </li>
      <li>
        <h5 class="flow-text-header">exclusion</h5>
        <p class="flow-text">This helper validates that the attributes' values are not included in a given set. In fact, this set can be any enumerable object.</p>
        <pre class="brush: ruby">
          class Account < ActiveRecord::Base
            validates :subdomain, exclusion: { in: %w(www us ca jp),
              message: "%{value} is reserved." }
          end
        </pre>
        <p class="flow-text">
          The exclusion helper has an option :in that receives the set of values that will not be accepted for the validated attributes. The :in option has an alias called :within that you can use for the same purpose, if you'd like to. This example uses the :message option to show how you can include the attribute's value.
        </p>
      </li>
      <li>
        <h5 class="flow-text-header">format</h5>
        <p class="flow-text">This helper validates the attributes' values by testing whether they match a given regular expression, which is specified using the :with option.</p>
        <pre class="brush: ruby">
          class Product < ActiveRecord::Base
            validates :legacy_code, format: { with: /\A[a-zA-Z]+\z/,
              message: "only allows letters" }
          end
        </pre>
      </li>
      <li>
        <h5 class="flow-text-header">inclusion</h5>
        <p class="flow-text">This helper validates that the attributes' values are included in a given set. In fact, this set can be any enumerable object.</p>
        <pre class="brush: ruby">
          class Coffee < ActiveRecord::Base
            validates :size, inclusion: { in: %w(small medium large),
              message: "%{value} is not a valid size" }
          end
        </pre>
        <p class="flow-text">
          The inclusion helper has an option :in that receives the set of values that will be accepted. The :in option has an alias called :within that you can use for the same purpose, if you'd like to.
        </p>
      </li>
      <li>
        <h5 class="flow-text-header">length</h5>
        <p class="flow-text">This helper validates the length of the attributes' values.</p>
        <pre class="brush: ruby">
          class Person < ActiveRecord::Base
            validates :name, length: { minimum: 2 }
            validates :bio, length: { maximum: 500 }
            validates :password, length: { in: 6..20 }
            validates :registration_number, length: { is: 6 }
          end
        </pre>
        <p class="flow-text">The possible length constraint options are:</p>
        <ul class="flow-text">
          <li><span class="flow-text-header">:minimum</span> - The attribute cannot have less than the specified length.</li>
          <li><span class="flow-text-header">:maximum</span> - The attribute cannot have more than the specified length.</li>
          <li><span class="flow-text-header">:in (or :within)</span> - The attribute length must be included in a given interval. The value for this option must be a range.</li>
          <li><span class="flow-text-header">:is</span> - The attribute length must be equal to the given value.</li>
        </ul>
      </li>
      <li>
        <h5 class="flow-text-header">numericality</h5>
        <p class="flow-text">This helper validates that your attributes have only numeric values. </p>
        <pre class="brush: ruby">
          class Player < ActiveRecord::Base
            validates :points, numericality: true
            validates :games_played, numericality: { only_integer: true }
          end
        </pre>
        <p class="flow-text">
          Besides :only_integer, this helper also accepts the following options to add constraints to acceptable values:
        </p>
        <ul class="flow-text">
          <li><span class="flow-text-header">:greater_than</span> - Specifies the value must be greater than the supplied value. The default error message for this option is "must be greater than %{count}".</li>
          <li><span class="flow-text-header">:greater_than_or_equal_to</span> - Specifies the value must be greater than or equal to the supplied value. The default error message for this option is "must be greater than or equal to %{count}".</li>
          <li><span class="flow-text-header">:equal_to</span> - Specifies the value must be equal to the supplied value. The default error message for this option is "must be equal to %{count}".</li>
          <li><span class="flow-text-header">:less_than</span> - Specifies the value must be less than the supplied value. The default error message for this option is "must be less than %{count}".
          <li><span class="flow-text-header">:less_than_or_equal_to</span> - Specifies the value must be less than or equal the supplied value. The default error message for this option is "must be less than or equal to %{count}".</li>
          <li><span class="flow-text-header">:odd</span> - Specifies the value must be an odd number if set to true. The default error message for this option is "must be odd".</li>
          <li><span class="flow-text-header">:even</span> - Specifies the value must be an even number if set to true. The default error message for this option is "must be even".</li>
        </ul>
      </li>
      <li>
        <h5 class="flow-text-header">presence</h5>
        <p class="flow-text">This helper validates that the specified attributes are not empty. It uses the blank? method to check if the value is either nil or a blank string.</p>
        <pre class="brush: ruby">
          class Person < ApplicationRecord
            validates :name, :login, :email, presence: true
          end
        </pre>
        <p class="flow-text">
          If you want to be sure that an association is present, you'll need to test whether the associated object itself is present, and not the foreign key used to map the association.
        </p>
        <pre class="brush: ruby">
          class LineItem < ApplicationRecord
            belongs_to :order
            validates :order, presence: true
          end
        </pre>
        <p class="flow-text">In order to validate associated records whose presence is required, you must specify the :inverse_of option for the association:</p>
        <pre class="brush: ruby">
          class Order < ApplicationRecord
            has_many :line_items, inverse_of: :order
          end
        </pre>
      </li>
      <li>
        <h5 class="flow-text-header">absence</h5>
        <p class="flow-text">This helper validates that the specified attributes are absent. It uses the present? method to check if the value is not either nil or a blank string.</p>
        <pre class="brush: ruby">
          class Person < ApplicationRecord
            validates :name, :login, :email, absence: true
          end
        </pre>
        <p class="flow-text">
          If you want to be sure that an association is absent, you'll need to test whether the associated object itself is absent, and not the foreign key used to map the association.
        </p>
        <pre class="brush: ruby">
          class LineItem < ApplicationRecord
            belongs_to :order
            validates :order, absence: true
          end
        </pre>
        <p class="flow-text">
          In order to validate associated records whose absence is required, you must specify the :inverse_of option for the association:
        </p>
      </li>
      <li>
        <h5 class="flow-text-header">uniqueness</h5>
        <p class="flow-text">This helper validates that the attribute's value is unique right before the object gets saved. It does not create a uniqueness constraint in the database</p>
        <pre class="brush: ruby">
          class Account < ApplicationRecord
            validates :email, uniqueness: true
          end
        </pre>
        <p class="flow-text">
          The validation happens by performing an SQL query into the model's table, searching for an existing record with the same value in that attribute
        </p>
        <pre class="brush: ruby">
          class Holiday < ApplicationRecord
            validates :name, uniqueness: { scope: :year,
              message: "should happen once per year" }
          end
        </pre>
        <p class="flow-text">
          There is also a :case_sensitive option that you can use to define whether the uniqueness constraint will be case sensitive or not. This option defaults to true.
        </p>
        <pre class="brush: ruby">
          class Person < ApplicationRecord
            validates :name, uniqueness: { case_sensitive: false }
          end
        </pre>
        <blockquote>
          Note that some databases are configured to perform case-insensitive searches anyway.
        </blockquote>
      </li>
      <li>
        <h5 class="flow-text-header">validates_with</h5>
        <p class="flow-text">This helper passes the record to a separate class for validation.</p>
        <pre class="brush: ruby">
          class GoodnessValidator < ActiveModel::Validator
            def validate(record)
              if record.first_name == "Evil"
                record.errors[:base] << "This person is evil"
              end
            end
          end

          class Person < ApplicationRecord
            validates_with GoodnessValidator
          end
        </pre>
        <p class="flow-text">
          The validates_with helper takes a class, or a list of classes to use for validation. There is no default error message for validates_with. You must manually add errors to the record's errors collection in the validator class.
        </p>
      </li>
      <li>
        <h5 class="flow-text-header"> validates_each</h5>
        <p class="flow-text">This helper validates attributes against a block. It doesn't have a predefined validation function. You should create one using a block, and every attribute passed to validates_each will be tested against it.</p>
        <pre class="brush: ruby">
          class Person < ApplicationRecord
            validates_each :name, :surname do |record, attr, value|
              record.errors.add(attr, 'must start with upper case') if value =~ /\A[[:lower:]]/
            end
          end
        </pre>
        <p class="flow-text">
          The validates_with helper takes a class, or a list of classes to use for validation. There is no default error message for validates_with. You must manually add errors to the record's errors collection in the validator class.
        </p>
      </li>
    </ol>
  </div>
  <div class="col s6">
    <%= render "shared/interactive_console"%>
  </div>
<script>
$(document).ready(function(){
  SyntaxHighlighter.all({
    'quick-code': false
  });
  $('#console').style('margin-top', "0px", 'important')
  $(".content_div").mCustomScrollbar({
    theme:"rounded-dark"
  });
})

</script>
