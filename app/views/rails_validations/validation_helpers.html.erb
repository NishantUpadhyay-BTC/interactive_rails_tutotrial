<div class="row section-div">
  <div class="col s6 content_div">
    <h4>Validation Helpers</h4>
    <ol>
      <li>
        <h5 class="flow-text-header">acceptance</h5>
        <p class="flow-text">This method validates that a checkbox on the user interface was checked when a form was submitted. This is typically used when the user needs to agree to your application's terms of service</p>
        <pre class="brush: ruby">
          class Person < ActiveRecord::Base
            validates :terms_of_service, acceptance: true
          end
        </pre>
      </li>
      <li>
        <h5 class="flow-text-header">validates_associated</h5>
        <p class="flow-text">use this helper when your model has associations with other models and they also need to be validated. When you try to save your object, valid? will be called upon each one of the associated objects.</p>
        <pre class="brush: ruby">
          class Library < ActiveRecord::Base
            has_many :books
            validates_associated :books
          end
        </pre>
        <blockquote class="flow-text">
          Don't use validates_associated on both ends of your associations. They would call each other in an infinite loop.
        </blockquote>
      </li>
      <li>
        <h5 class="flow-text-header">confirmation</h5>
        <p class="flow-text">Use this helper when you have two text fields that should receive exactly the same content. For example, you may want to confirm an email address or a password.</p>
        <pre class="brush: ruby">
          class Person < ActiveRecord::Base
            validates :email, confirmation: true
          end

          # In ERB view file
          <%%= text_field :person, :email %>
          <%%= text_field :person, :email_confirmation %>
        </pre>
      </li>
      <li>
        <h5 class="flow-text-header">exclusion</h5>
        <p class="flow-text">This helper validates that the attributes' values are not included in a given set. In fact, this set can be any enumerable object.</p>
        <pre class="brush: ruby">
          class Account < ActiveRecord::Base
            validates :subdomain, exclusion: { in: %w(www us ca jp),
              message: "%{value} is reserved." }
          end
        </pre>
        <p class="flow-text">
          The exclusion helper has an option :in that receives the set of values that will not be accepted for the validated attributes. The :in option has an alias called :within that you can use for the same purpose, if you'd like to. This example uses the :message option to show how you can include the attribute's value.
        </p>
      </li>
    </ol>
  </div>
  <div class="col s6">
    <div class="console-font"><b>Interactive Rails console Ready</b></div>
    <%= render "shared/interactive_console"%>
  </div>
<script>
$(document).ready(function(){
  SyntaxHighlighter.all();
  $('#console').style('margin-top', "0px", 'important')
  $(".content_div").mCustomScrollbar({
    theme:"rounded-dark"
  });
})

</script>
